import os
import argparse
import shutil
import subprocess
import time
import functions

parser = argparse.ArgumentParser(usage='FAH_GMX.py -i source_directory -o output_result_directory -nt no_logical_processors \n       \
FAH_GMX.py -i source_file -o output_result_directory -nt no_logical_processors -nsteps 1000 -envar SYCL_BE=OPENCL \n       \
Use -h or --help for further details \n \n', \
description='Finds science.log file, parse gromacs command line and executes tests in that directory')
parser.add_argument('-i', "--input", required=True, type= str, help='Provide the path of the science.log or directory containing F@H project files')
parser.add_argument('-o', "--output", required=True, default= None, type= str, help='Provide the directory path to store the result in csv')
parser.add_argument('-l', "--log", required=True, default= "result", type= str, help='Provide the filename to store result in csv')
parser.add_argument('-nt', "--threads", required=True, type=int, help='Provide the number of logical processor')
parser.add_argument('-ntmpi', "--devices", required=False, type=int, help='Provide the number of graphical processor')
parser.add_argument('-nsteps', "--steps", required=False, default=1000, type=int, help='Provide the number of steps for calculations')
parser.add_argument('-envar', "--env", required=False, default=None, type=str, help='Provide the environmental or runtime variable')
parser.add_argument('-gpu_id', "--gpu", required=False, default= None, type=int, help='Provide the id of the gpu node to be used for calculations')
parser.add_argument('-extra', "--extra", required=False, default= None, type=str, help='Provide the additional args to be used for calculations')
parser.add_argument('-d', "--delete", required=False, default='No', type=str, help='Delete the output files generated by gromacs')
parser.add_argument('-dlb', "--dynamic", required=False, default=None, type=str, help='Activate dynamic load balancing')
parser.add_argument('-gmx', "--gmx_path", required=False, default='No', type=str, help='Add full gromacs path')
args = parser.parse_args()

input = args.input
result = args.output
log = args.log
threads = args.threads
devices = args.devices
steps = args.steps
gpu_id = args.gpu
env_var = args.env
extra_args = args.extra
delete_output = args.delete
gmx_path = args.gmx_path
dynamic = args.dynamic

if functions.is_file(input) is True:
    files = [input]
elif functions.is_folder(input) is True:
    files = functions.get_path(input, 'science.log')
else:
    print('Please mention valid file or directory using -o')
    exit()

output = os.path.join(result, log + ".csv")

arr = []

current_dir = os.getcwd()
sh_file = os.path.join(current_dir, "run.sh")

for file in files:
    with open(file) as f:
        print(file)
        working_dir = os.path.dirname(file)
        original_files = functions.get_path(working_dir)
        print(working_dir)
        if gmx_path is not None:
            args = f.readline().replace("Calling:",gmx_path)
        else:
            args = f.readline().replace("Calling:","gmx")
        args = functions.change_parameter("-nt", args, str(threads))
        if devices is not None:
            args = functions.change_parameter("-ntmpi", args, str(devices))
        if dynamic is not None:
            args = functions.add_parameter("-dlb", args, str(dynamic))
        args = functions.add_parameter("-nsteps", args, str(steps))
        args = functions.add_parameter("-v", args, '')
        if gpu_id is not None:
            args = functions.add_parameter("-gpu_id", args, str(gpu_id))
        if env_var is not None:
            args = env_var + " " + args
        if extra_args is not None:
            args = args + " " + extra_args
        # args = functions.add_parameter(">", args, 'gmx_log.txt')
        print(args + "\n")
        i = 0
        result_dir = os.path.join(working_dir, "log_"+ log + "_" + str(i))
        while os.path.exists(result_dir):
            i = i + 1
            result_dir = os.path.join(working_dir, "log_"+ log + "_" + str(i))
        os.mkdir(result_dir)
        dummy_sh = open(sh_file, "rt")
        work_sh = os.path.join(working_dir, "run.sh")
        if os.path.exists(work_sh):
            os.remove(work_sh)
        with open(work_sh, "wt") as sh:
            for line in dummy_sh:
                sh.write(line.replace("COMMAND_LINE", args))
        dummy_sh.close()

        start = functions.run_shell(working_dir)
        subprocess.run(['sudo', 'pkill', '-USR1', 'mpstat'])
        subprocess.run(['sudo', 'pkill', '-USR1', 'intel_gpu_top'])

        # if start == 0:
        generated_files = functions.get_path(working_dir)
        result_files = list(set(generated_files).difference(original_files))
        for result_file in result_files:
            shutil.move(result_file, result_dir)
        cpu_log = os.path.join(result_dir, "cpu_log.txt")
        cpu_usage = functions.read_cpu_log(cpu_log)
        cpu_usage = cpu_usage.decode("utf-8")
        cpu_usage = cpu_usage.split()[2]
        print("CPU usage is %s" % cpu_usage)

        cpu_freq_log = os.path.join(result_dir, "cpu_freq.txt")
        cpu_freq_avg, cpu_freq_avg_all, cpu_freq_max, cpu_freq_max_all = functions.read_cpu_freq(cpu_freq_log, os.cpu_count())

        gpu_log = os.path.join(result_dir, "gpu_log.txt")
        freq_req, freq_req_max, freq_act, freq_act_max, rcs1, rcs2, rcs3, rcs4, rcs5, bcs, vcs1, vcs2, vecs = functions.read_gpu_log(gpu_log)
        gpu_usage = rcs1 + rcs2 + rcs3 + rcs4 + rcs5 + bcs + vcs1 + vcs2 + vecs
        print("GPU usage is %s" % gpu_usage)

        gmx_log = functions.get_path(result_dir, "md.log")[0]
        print(gmx_log)
        gmx_perf, gmx_wallTime = functions.read_gmx_log(gmx_log)
        print("GMX performance is %s and wall time is %s" % (gmx_perf, gmx_wallTime))

        col = []
        col.append(working_dir)
        col.append(gmx_perf)
        col.append(gmx_wallTime)
        col.append(cpu_usage)
        col.append(gpu_usage)
        col.append(freq_req)
        col.append(freq_req_max)
        col.append(freq_act)
        col.append(freq_act_max)
        for i in range(os.cpu_count()):
            col.append(cpu_freq_avg[i])
        col.append(cpu_freq_avg_all)
        for i in range(os.cpu_count()):
            col.append(cpu_freq_max[i])
        col.append(cpu_freq_max_all)
        arr.append(col)
        time.sleep(60)
        # else:
        #     print("Process failed with error code %d" %start)
        
header = ["Project", "GMX Performance (ns/day)", "GMX Wall time (s)"]
header = ["Project", "GMX Performance (ns/day)", "GMX Wall time (s)", "CPU_Usage", "GPU_Usage", "GPU_Freq_req", "GPU_Freq_req_max", "GPU_Freq_act", "GPU_Freq_act_max"]
for i in range(os.cpu_count()):
    header.append("CPU_Core_" + str(i) + "_Avg_Freq")
header.append("CPU_Core_All_Avg_Freq")
for i in range(os.cpu_count()):
    header.append("CPU_Core_" + str(i) + "_Max_Freq")
header.append("CPU_Core_All_Max_Freq")
functions.write_csv(output, header, arr)
